#include "Game.h"
#include"Zabezpieczenia.h"
#include <iostream>
#include <cstdio>
#include <ctime>
#include <cstdlib>
#include "Logowanie.h"
#include"Totolotek.h"
#include"Kolko.h"

using namespace std;

int N, x, y, m, n, o, p, suma, przeszkody = 0;


// Funkcja rysuje planszę gry w kółko i krzyżyk
//---------------------------------------------
void plansza(char t[])
{
    for (int i = 1; i <= 9; i++)
    {
        cout << " " << t[i] << " ";
        if (i % 3)
            cout << "|";
        else if (i != 9)
            cout << "\n---+---+---\n";
        else cout << endl;
    }
}

// Funkcja zwraca true, jeśli nastąpiła
// wygrana danego zawodnika
//-------------------------------------
bool wygrana(char t[], char g)
{
    bool test;
    int i;

    test = false;
    for (i = 1; i <= 7; i += 3)
        test |= ((t[i] == g) && (t[i + 1] == g) && (t[i + 2] == g));
    for (i = 1; i <= 3; i++)
        test |= ((t[i] == g) && (t[i + 3] == g) && (t[i + 6] == g));
    test |= ((t[1] == g) && (t[5] == g) && (t[9] == g));
    test |= ((t[3] == g) && (t[5] == g) && (t[7] == g));
    if (test)
    {
        plansza(t);
        cout << "\nGRACZ " << g << " WYGRYWA!!!\n\n";
        return true;
    }
    return false;
}

// Funkcja zwraca true, jeśli na planszy nie ma już
// żadnego wolnego pola na ruch.
//-------------------------------------------------
bool remis(char t[])
{
    for (int i = 1; i <= 9; i++)
        if (t[i] == ' ') return false;
    plansza(t);
    cout << "\nREMIS !!!\n\n";
    return true;
}

// Funkcja umożliwia ruch gracza
// Po ruchu następuje zamiana gracza
//------------------------------------
void ruch(char t[], char& gracz)
{
    int r;

    plansza(t);
    cout << "\nGRACZ " << gracz << " : Twoj ruch : ";
    cin >> r;
    cout << "-----------------------\n\n";
    if ((r >= 1) && (r <= 9) && (t[r] == ' ')) t[r] = gracz;
    gracz = (gracz == 'O') ? 'X' : 'O';
}


const char* MAPA[] = {
"##########",
"# #     ##",
"# #  #   #",
"# #   #  #",
"# ### ## #",
"#     #  #",
"# # ###  #",
"# #    # #",
"#    #   #",
"##########"
};

char val[] = "0123456789abcdefghijklmnoprstuvwxyz";

void rysuj(char mapa[10][10]) {
    for (int y = 0; y < 10; y++) {
        for (int x = 0; x < 10; x++) {
            if (mapa[x][y] < 0)
                printf("#");
            if (mapa[x][y] == 0)
                printf(" ");
            else
                printf("%c", val[mapa[x][y]]);
        }
        printf("\n");
    }
    printf("\n");
}

bool zaznacz(char mapa[10][10]) {
    // Funkcja potrzebuje mapy w której wartość 1 to punkt startowy, -1 to miejsca gdzie nie może iść
    // 0 to wolne pola
    //Wymaga ramki do okoła
    bool zmiana = false;
    int o;
    for (int y = 1; y < 9; y++) {
        for (int x = 1; x < 9; x++) {
            if (mapa[x][y] < 0) continue; //jeśli ściana, sprawdź następny
            o = mapa[x][y]; //przed oznaczeniem
            if (mapa[x + 1][y] > 0) //prawo jeśli nie ma ściany, ale został odwiedzony
                if (mapa[x + 1][y] + 1 < mapa[x][y] || mapa[x][y] == 0) //i jeśli z tamtej drogi jest krócej do aktualnej,
                //lub aktualna jest nieodwiedzona
                    mapa[x][y] = mapa[x + 1][y] + 1; //oznacza tutaj odległość poprzedniej+1

            if (mapa[x - 1][y] > 0) //lewo
                if (mapa[x - 1][y] + 1 < mapa[x][y] || mapa[x][y] == 0)
                    mapa[x][y] = mapa[x - 1][y] + 1;

            if (mapa[x][y + 1] > 0) //dół
                if (mapa[x][y + 1] + 1 < mapa[x][y] || mapa[x][y] == 0)
                    mapa[x][y] = mapa[x][y + 1] + 1;

            if (mapa[x][y - 1] > 0) //góra
                if (mapa[x][y - 1] + 1 < mapa[x][y] || mapa[x][y] == 0)
                    mapa[x][y] = mapa[x][y - 1] + 1;

            if (o != mapa[x][y]) zmiana = true; //jeśli zaszła zmiana, ustawia na true, że była jakaś zmiana i kolejne wykonanie
            //może coś jeszcze zmienić
        }
    }
    return zmiana;
}

void wyczysc(char mapa[10][10], int odX, int odY, int doX, int doY) {
    //Czyszczenie dróg
    bool droga[10][10]; //przechowuje najkrótszą ścieżkę
    //memset(droga, 0, 100); //czyszczenie tablicy
    while (odX != doX || odY != doY) { //dopóki nie dojdzie od końca do punktu początkowego
        droga[doX][doY] = true;
        //szukanie po sąsiadach najkrótszych odległości, tzn. mniejszych od aktualnej
        //wcześniejsza funkcja daje pewność, że różnice między odległościami zawsze wynoszą 1
        if (mapa[doX + 1][doY] < mapa[doX][doY] && mapa[doX + 1][doY]>0) {
            doX++; continue;
        }
        if (mapa[doX - 1][doY] < mapa[doX][doY] && mapa[doX - 1][doY]>0) {
            doX--; continue;
        }
        if (mapa[doX][doY + 1] < mapa[doX][doY] && mapa[doX][doY + 1]>0) {
            doY++; continue;
        }
        if (mapa[doX][doY - 1] < mapa[doX][doY] && mapa[doX][doY - 1]>0) {
            doY--; continue;
        }
        return; //jeśli jakimś sposobem nie ma najkrótszej drogi, przerywa
    }
    for (int y = 1; y < 9; y++) {
        for (int x = 1; x < 9; x++) {
            if (!droga[x][y])
                if (mapa[x][y] > 0)
                    mapa[x][y] = 0; //czyszczenie dłuższych dróg
        }
    }
    mapa[odX][odY] = 1; //punkt startowy
}

void szukaj(int odX, int odY, int doX, int doY) {
    char mapa[10][10];
    for (int i = 0; i < 100; i++) { //przepisanie mapy, w tym przypadku trzeba ją obrócić
        if (MAPA[i % 10][i / 10] == '#') //jeśli ściana
            mapa[i / 10][i % 10] = -1; //przypisz wartość ujemną
        else
            mapa[i / 10][i % 10] = 0; //puste
    }
    printf("Mapa: \n");
    rysuj(mapa); //mapa bez narysowanych scieżek
    mapa[odX][odY] = 1; //punkt startoey
    while (zaznacz(mapa)) { //zaznaczanie na mapie kolejno odwiedzanych pól, dopóki są jakiś zmiany, powtarza
    //rysuj(mapa);
    }
    printf("Odleglosci: \n");
    rysuj(mapa); //rysuje mapę z wyznaczonymi odległościami
    wyczysc(mapa, odX, odY, doX, doY); //pozostawia tylko najkrótszą ścieżkę
    printf("Najkrotsza: \n");
    rysuj(mapa); //rysuje mapę po oczyszczeniu
}

class User
{
public:
    User()
    {
        for (int i = 0; i < 3; i++) {
            statystyki[i][0] = rand() % 10 + 1;
            statystyki[i][1] = rand() % 10 + 1;
        }
    }
    string Imie;
    string plec;

    int statystyki[3][2]; //int[i][0] wygrane;     int[i][1] przegrane;


    void info()
    {

        cout << "______________________________________" << endl;
        cout << "Informacje o postaci: " << endl;
        cout << "Imie: " << Imie << endl;
        cout << "Plec: " << plec << endl;
        cout << "Statystyki: " << Imie << endl;
        for (int i = 0; i < 3; i++) {
            cout << "Gra nr: " << i;
            cout << "\t Wygrane: " << statystyki[i][0];
            cout << "\t Przegrane: " << statystyki[i][1] << endl;
        }

        cout << "______________________________________" << endl << endl;

    }



};



void doplik(string imie, string plec, int statystyki[3][2]) {




}


void poziom(User& obiekt)
{
    int poz = 0;
    cout << "______________________________________" << endl;
    cout << "Poziom postaci: " << endl;
    for (int i = 0; i < 3; i++) {
        poz += (obiekt.statystyki[i][0] * 10) / (obiekt.statystyki[i][1] * 5 + 1);
    }
    cout << poz << endl;
    cout << "______________________________________" << endl << endl;

}

User zpliku() {
    User us1;

    //us1.Imie = 
    //us1.plec =
    //for
    //us1.statystyki[i][j] = 

    return us1;
}


void funkcjaZew(User& obiekt)
{
    cout << "______________________________________" << endl;

    cout << "Zmienne klasy w funkcji zewnetrznej: " << endl;
    //cout << obiekt.zmiennaInt << endl;
    //cout << obiekt.zmiennaDouble << endl;
    cout << "______________________________________" << endl;

}


void tworzeniehasla(char haslo[9], char znaki[9], int iloscznakow[3]) {
    int x;
    //x = (a + (rand() % (b - a)))
    for (int i = 0; i < 9; i++) {
        while (true) {
            x = (rand() % 3);
            if (iloscznakow[x] > 0) {
                iloscznakow[x]--;
                switch (x)
                {
                case 0: //małe litery
                    haslo[i] = (97 + (rand() % (122 - 97)));
                    break;
                case 1: //duże litery
                    haslo[i] = (65 + (rand() % (90 - 65)));
                    break;
                case 2: //znaki
                    haslo[i] = znaki[(rand() % 8)];
                    break;
                default:
                    cout << "ERROR!!!";
                    break;
                }
                break; //break do while
            }
        }
    }
}


int main()

{

    Logowanie a;
    a.log();

    Zabezpieczenia b;
    b.zabezpieczenia();

    Game g;
    g.menu();

    Totolotek z;
    z.losowanie();

    Kolko f;
    f.kolko();



    int stan = 1;
    while (stan != 0)
    {
        cout << "Podaj liczbe od 0 do 2:" << endl << "0-wyjście" << endl << "1-losowanie statystyk i posatci" << endl << "2-menu gier" << endl;

        cout << endl;
        cin >> stan;
        if (stan == 1) {
            User Paulina;
            User Jan;
            cout << "Losowanie postaci: " << endl << "Proszę wybrać dwie dowolne liczby" << endl;
            string imie;
            cin >> imie;
            Paulina.Imie = imie;
            cin >> imie;
            Jan.Imie = imie;
            Paulina.info();
            Jan.info();
            poziom(Paulina);
            poziom(Jan);

            doplik(Paulina.Imie, Paulina.plec, Paulina.statystyki);
            // cout << "Wywolanie funkcji zewnetrznej:5: " << endl;

            Paulina = zpliku();







            return 0;

        }





    }
}
